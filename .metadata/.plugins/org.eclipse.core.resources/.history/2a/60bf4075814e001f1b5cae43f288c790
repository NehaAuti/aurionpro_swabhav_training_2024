package com.aurionpro.stream.test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.aurionpro.stream.model.Country;
import com.aurionpro.stream.model.Region;

public class CountryRegionTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// Create Region objects
        Region europe = new Region(1, "Europe");
        Region americas = new Region(2, "Americas");
        Region asia = new Region(3, "Asia");
        Region middleEastAfrica = new Region(4, "Middle East and Africa");

        // Create a list to store Country objects
        List<Country> countries = new ArrayList<>();

        // Add Country objects to the list
        countries.add(new Country("IT", "Italy", europe));
        countries.add(new Country("JP", "Japan", asia));
        countries.add(new Country("US", "United States of America", americas));
        countries.add(new Country("CA", "Canada", americas));
        countries.add(new Country("CN", "China", asia));
        countries.add(new Country("IN", "India", asia));
        countries.add(new Country("AU", "Australia", asia));
        countries.add(new Country("ZW", "Zimbabwe", middleEastAfrica));
        countries.add(new Country("SG", "Singapore", asia));
        countries.add(new Country("UK", "United Kingdom", europe));
        countries.add(new Country("FR", "France", europe));
        countries.add(new Country("DE", "Germany", europe));
        countries.add(new Country("ZM", "Zambia", middleEastAfrica));
        countries.add(new Country("EG", "Egypt", middleEastAfrica));
        countries.add(new Country("BR", "Brazil", americas));
        countries.add(new Country("CH", "Switzerland", europe));
        countries.add(new Country("NL", "Netherlands", europe));
        countries.add(new Country("MX", "Mexico", americas));
        countries.add(new Country("KW", "Kuwait", middleEastAfrica));
        countries.add(new Country("IL", "Israel", middleEastAfrica));
        countries.add(new Country("DK", "Denmark", europe));
        countries.add(new Country("HK", "HongKong", asia));
        countries.add(new Country("NG", "Nigeria", middleEastAfrica));
        countries.add(new Country("AR", "Argentina", americas));
        countries.add(new Country("BE", "Belgium", europe));

        // Test the methods
        System.out.println("Country name by code 'JP': " + getCountryNameByCode(countries, "JP"));

        System.out.println("Countries in region ID 1:");
        getCountriesByRegionId(countries, 1).forEach(System.out::println);

        System.out.println("Count of countries in each region:");
        Map<String, Long> regionCounts = getCountryCountByRegion(countries);
        regionCounts.forEach((regionName, count) -> 
            System.out.println(regionName + ": " + count));
    }

    // Method to get country name by code
    public static String getCountryNameByCode(List<Country> countries, String code) {
        return countries.stream()
                        .filter(country -> country.getCode().equals(code))
                        .map(Country::getName)
                        .findFirst()
                        .orElse("Country code not found");
    }

    // Method to get all countries in a region by region ID
    public static List<Country> getCountriesByRegionId(List<Country> countries, int regionId) {
        return countries.stream()
                        .filter(country -> country.getRegion().getId() == regionId)
                        .collect(Collectors.toList());
    }

    // Method to find count of countries in each region
    public static Map<String, Long> getCountryCountByRegion(List<Country> countries) {
        return countries.stream()
                        .collect(Collectors.groupingBy(
                            country -> country.getRegion().getName(),
                            Collectors.counting()
                        ));
    }
}
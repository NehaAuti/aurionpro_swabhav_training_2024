package com.aurionpro.tictactoe.model;

import java.util.stream.IntStream;

public class Board {
    private final Cell[][] board;
    private final int size;

    public Board(int size) {
        this.size = size;
        board = new Cell[size][size];
        initializeBoard();
    }

    private void initializeBoard() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                board[i][j] = new Cell();
            }
        }
    }

    public boolean placeMark(int row, int col, char mark) {
        if (isCellEmpty(row, col)) {
            board[row][col].setMark(mark);
            return true;
        }
        return false;
    }

    private boolean isCellEmpty(int row, int col) {
        return board[row][col].getMark() == ' ';
    }

    public boolean checkWin(char mark) {
        return checkRows(mark) || checkCols(mark) || checkDiagonals(mark);
    }

    private boolean checkRows(char mark) {
        return IntStream.range(0, size).anyMatch(row -> checkRow(row, mark));
    }

    private boolean checkRow(int row, char mark) {
        return IntStream.range(0, size).allMatch(col -> board[row][col].getMark() == mark);
    }

    private boolean checkCols(char mark) {
        return IntStream.range(0, size).anyMatch(col -> checkCol(col, mark));
    }

    private boolean checkCol(int col, char mark) {
        return IntStream.range(0, size).allMatch(row -> board[row][col].getMark() == mark);
    }

    private boolean checkDiagonals(char mark) {
        return checkMainDiagonal(mark) || checkAntiDiagonal(mark);
    }

    private boolean checkMainDiagonal(char mark) {
        return IntStream.range(0, size).allMatch(i -> board[i][i].getMark() == mark);
    }

    private boolean checkAntiDiagonal(char mark) {
        return IntStream.range(0, size).allMatch(i -> board[i][size - i - 1].getMark() == mark);
    }

    public boolean isFull() {
        return IntStream.range(0, size).flatMap(row -> IntStream.range(0, size).map(col -> board[row][col].getMark())).noneMatch(mark -> mark == ' ');
    }

    public void display() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(board[i][j].getMark());
                if (j < size - 1) System.out.print("|");
            }
            System.out.println();
            if (i < size - 1) System.out.println(repeat("-", size * 2 - 1));
        }
    }

    private String repeat(String str, int count) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < count; i++) {
            sb.append(str);
        }
        return sb.toString();
    }
}
